import{_ as e,V as t,W as p,X as n,Y as s,Z as i,a0 as l,F as c}from"./framework-9b2b5024.js";const o={},u=n("h2",{id:"常见问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#常见问题","aria-hidden":"true"},"#"),s(" 常见问题")],-1),r=n("h3",{id:"github-pages部署vuepress报错-javascript-heap-out-of-memory",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#github-pages部署vuepress报错-javascript-heap-out-of-memory","aria-hidden":"true"},"#"),s(" GitHub Pages部署vuepress报错：JavaScript heap out of memory")],-1),d={href:"https://blog.csdn.net/qq_42937522/article/details/123387368",target:"_blank",rel:"noopener noreferrer"},m=l(`<hr><p>经过搜索常常得出了两种解决方案。</p><h4 id="_1、使用-increase-memory-limit-插件" tabindex="-1"><a class="header-anchor" href="#_1、使用-increase-memory-limit-插件" aria-hidden="true">#</a> 1、使用 increase-memory-limit 插件</h4><p>TypeScript 和 webpack 时的常见问题，项目过大时，使用 increase-memory-limit，增加node服务器内存限制。</p><p>安装：</p><p>npm install -g increase-memory-limit</p><p>进入工程目录执行：</p><p>increase-memory-limit</p><p>在执行上述操作后，然后执行npm run build 后，会报错：</p><p>&#39;&quot;node --max-old-space-size=4096&quot;&#39; 不是内部或外部命令，也不是可运行的程序</p><p>在高版本中移除了node命令，所以也不能解决。</p><p>2、修改cmd文件</p><p>在目录node_modules/.bin下打开ng.cmd和ngc.cmd文件，添加 --max_old_space_size=4096</p><p>但是因为最终部署在GitHub Pages，没有办法直接修改 node_modules 的文件，所以这种方法不行。</p><h4 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h4><p>Node.js v8.0 开始，可以使用NODE_OPTIONS 环境变量来全局设置 max_old_space_size 来增加内存限制</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token constant">NODE_OPTIONS</span><span class="token operator">=</span><span class="token operator">--</span>max_old_space_size<span class="token operator">=</span><span class="token number">4096</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>increase-memory-limit 将附加 --max-old-space-size=4096 到文件中的所有 node 调用中node_modules/.bin/*。</p><p>注意：如果在windows系统，可以使用命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> <span class="token assign-left variable">NODE_OPTIONS</span><span class="token operator">=</span>--max_old_space_size<span class="token operator">=</span><span class="token number">4096</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改原来的github部署脚本</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy GitHub Pages

<span class="token comment"># 触发条件：在 push 到 master 分支后</span>
<span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token key atrule">push</span><span class="token punctuation">:</span>
    <span class="token key atrule">branches</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> main

<span class="token comment"># 任务</span>
<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">build-and-deploy</span><span class="token punctuation">:</span>
    <span class="token comment"># 服务器环境：最新版 Ubuntu</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest
    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token comment"># 拉取代码</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">persist-credentials</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>

      <span class="token comment"># 生成静态文件</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Build
        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm install <span class="token important">&amp;&amp;</span> export NODE_OPTIONS=<span class="token punctuation">-</span><span class="token punctuation">-</span>max_old_space_size=4096 <span class="token important">&amp;&amp;npm</span> run build

      <span class="token comment"># 部署到 GitHub Pages</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> JamesIves/github<span class="token punctuation">-</span>pages<span class="token punctuation">-</span>deploy<span class="token punctuation">-</span>action@releases/v3
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">ACCESS_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.ACCESS_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>
          <span class="token key atrule">BRANCH</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages
          <span class="token key atrule">FOLDER</span><span class="token punctuation">:</span> docs/.vuepress/dist


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="github-pages-自定义域名失效" tabindex="-1"><a class="header-anchor" href="#github-pages-自定义域名失效" aria-hidden="true">#</a> github pages 自定义域名失效</h3><p>把 dist 目录下的文件全部提交到 gh-pages(或者 master) 分支上去作为 pages 的展示的内容， 但是 CNAME 文件没有提交上去，也就是说，vuepress 项目作为 blog 的 CNAME 文件（自定义域名）需要放在 .vuepress/public 中，而不是实际当前的根目录下（如果你的目录跟我类似的话）</p>`,24);function k(v,b){const a=c("ExternalLinkIcon");return t(),p("div",null,[u,r,n("ul",null,[n("li",null,[n("a",d,[s("https://blog.csdn.net/qq_42937522/article/details/123387368"),i(a)])])]),m])}const _=e(o,[["render",k],["__file","Blog01.html.vue"]]);export{_ as default};
