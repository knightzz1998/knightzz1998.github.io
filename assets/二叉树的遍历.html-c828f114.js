const e=JSON.parse('{"key":"v-44ff06b7","path":"/leetcode/binary_tree/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86.html","title":"二叉树的遍历","lang":"zh-CN","frontmatter":{"title":"二叉树的遍历","description":"二叉树的迭代遍历 前序遍历 基本思路 基本思路其实很简单, 使用递归遍历的时候, 一直是系统帮我们把其他数据压栈, 举个例子 =&gt; ans = [5,4,6,2,1,,null,null] 前序遍历的序列是: [5,4,2,1,6] , 栈的出入顺序是, 先入, 后出, 假如我们想要一个元素先出, 就要让它后入栈","head":[["meta",{"property":"og:url","content":"https://knightzz1998.github.io/leetcode/binary_tree/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86.html"}],["meta",{"property":"og:site_name","content":"十里平湖霜满天"}],["meta",{"property":"og:title","content":"二叉树的遍历"}],["meta",{"property":"og:description","content":"二叉树的迭代遍历 前序遍历 基本思路 基本思路其实很简单, 使用递归遍历的时候, 一直是系统帮我们把其他数据压栈, 举个例子 =&gt; ans = [5,4,6,2,1,,null,null] 前序遍历的序列是: [5,4,2,1,6] , 栈的出入顺序是, 先入, 后出, 假如我们想要一个元素先出, 就要让它后入栈"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-23T12:00:20.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-23T12:00:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"二叉树的遍历\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-23T12:00:20.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"二叉树的迭代遍历","slug":"二叉树的迭代遍历","link":"#二叉树的迭代遍历","children":[{"level":3,"title":"前序遍历","slug":"前序遍历","link":"#前序遍历","children":[]},{"level":3,"title":"中序遍历","slug":"中序遍历","link":"#中序遍历","children":[]},{"level":3,"title":"后续遍历","slug":"后续遍历","link":"#后续遍历","children":[]},{"level":3,"title":"层序遍历","slug":"层序遍历","link":"#层序遍历","children":[]}]}],"git":{"createdTime":1673277212000,"updatedTime":1677153620000,"contributors":[{"name":"王天赐","email":"15565946702@163.com","commits":4}]},"readingTime":{"minutes":4.45,"words":1334},"filePathRelative":"leetcode/binary_tree/二叉树的遍历.md","localizedDate":"2023年1月9日","excerpt":"<h2> 二叉树的迭代遍历</h2>\\n<h3> 前序遍历</h3>\\n<h4> 基本思路</h4>\\n<p>基本思路其实很简单, 使用递归遍历的时候, 一直是系统帮我们把其他数据压栈, 举个例子</p>\\n<img src=\\"https://haloos.oss-cn-beijing.aliyuncs.com/typero/image-20230105193148870.png\\" alt=\\"image-20230105193148870\\" style=\\"zoom:50%;\\">\\n<p>=&gt; ans = [5,4,6,2,1,,null,null]</p>\\n<p>前序遍历的序列是: [5,4,2,1,6] , 栈的出入顺序是, 先入, 后出, 假如我们想要一个元素先出, 就要让它后入栈</p>","autoDesc":true}');export{e as data};
